// não permitir que componentes como lista e show recebam um parametro de container,
// isso so dificulta o raciocinio na hora de criar.


por que por exemplo, o problema atual que temos é que precisamos saber o pai de um determinado 
componente na hora de cria-lo, mas se usarmos um container de antemao, saberemos quem eh o pai do container,
por que ele foi previamente colocado na arvore

function signal(value) {
    const handler = {
        apply(target, thisArg, args) {
            // Quando chamado normalmente (ex: get())
            return value;
        },
        toString() {
            // Quando usado em template string ou convertido para string
            return "<$!>";
        },
        get(target, prop) {
            // Garante o uso de toString() em casos não explícitos
            if (prop === 'toString') return () => "<$!>";
            return Reflect.get(target, prop);
        }
    };

    // Proxy para o getter
    const getter = new Proxy(function () {}, handler);

    function setter(newValue) {
        value = newValue;
    }

    return [getter, setter];
}

const [getValue, setValue] = signal(10);

// Chamando normalmente
console.log(getValue()); // Saída: 10

// Chamando dentro de template strings
console.log(`${getValue}`);       // Saída: "<$!>"
console.log(`${getValue()}`);     // Saída: "<$!>"
console.log(String(getValue));    // Saída: "<$!>"

// Alterando o valor
setValue(42);
console.log(getValue()); // Saída: 42
console.log(`${getValue}`); // Saída: "<$!>"


#########################################################################################

function signal(value) {
    const getter = function () {
        return value; // Retorna o valor normal
    };

    // Adiciona comportamentos especiais em `toString` e `valueOf`
    Object.defineProperty(getter, "toString", {
        value: () => "<$!>",
        writable: false,
        enumerable: false,
        configurable: false
    });

    Object.defineProperty(getter, "valueOf", {
        value: () => value,
        writable: false,
        enumerable: false,
        configurable: false
    });

    function setter(newValue) {
        value = newValue; // Atualiza o valor
    }

    return [getter, setter];
}

const [getValue, setValue] = signal(10);

// Testes
console.log(getValue());         // Saída: 10 (chamada normal)
console.log(`${getValue}`);      // Saída: "<$!>" (template string)
console.log(String(getValue));   // Saída: "<$!>" (conversão para string)
console.log(Number(getValue));   // Saída: 10 (conversão para número)

// Alterando o valor
setValue(42);
console.log(getValue());         // Saída: 42
console.log(`${getValue}`);      // Saída: "<$!>"


        // fazer com que o toString do signal retorne um markup como $<$!> dai ao
        // ser usado no template podera mais tarde ter o valor trocado.
        // dai pra contornar a possibilidade de poder ser usar varios signals
        // pode ser usado um array para colocar as funções de atualização lá



// type Props<T = any, K = any> = K extends PropsType ? PropsType<T> : K;

// type DivProperties = {
//   id: string;
//   style: object;
// }

// function Div(...props: Props<DivProperties>[]){

// }

// function H1(...props: Props<{h1: string}>[]){}

// type PropsType<T = any> = T

// function props<T>(props: PropsType<T>) : PropsType<T> {
//   return "" as PropsType<T>;
// }



// Div(props({id: "", style: {}}))


// H1(props({h1: ""}))